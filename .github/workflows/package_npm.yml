name: 🧪 Test, Analyze & Package

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  packages: write

jobs:
  test-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📦 Setup Node.js for GitHub Packages
      uses: actions/setup-node@v4
      with:
        node-version: '21'
        registry-url: 'https://npm.pkg.github.com'
        scope: '@marant7'
        
    - name: 🧪 Test Customer App
      run: |
        cd customer-app
        npm ci
        npm run test:cov
        npm run build
        
    - name: 🧪 Test Notifications
      run: |
        cd notifications
        npm ci
        npm run test:cov
        npm run build
        
    - name: 📊 SonarCloud Scan (Customer App Only)
      uses: SonarSource/sonarcloud-github-action@v2.3.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: customer-app
        
    - name: 🏢 Publish Customer App to GitHub Packages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd customer-app
        
        # Configurar .npmrc para GitHub Packages
        echo "@marant7:registry=https://npm.pkg.github.com" > .npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ secrets.TOKEN_PACKAGE }}" >> .npmrc
        
        # Generar versión única basada en timestamp
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        NEW_VERSION="1.0.${TIMESTAMP}"
        
        # Configurar package.json con versión única
        node -e "
          const pkg = require('./package.json');
          pkg.name = '@marant7/customer-app-ramos';
          pkg.version = '$NEW_VERSION';
          delete pkg.private;
          pkg.publishConfig = {
            registry: 'https://npm.pkg.github.com',
            access: 'public'
          };
          pkg.repository = {
            type: 'git',
            url: 'git+https://github.com/${{ github.repository }}.git'
          };
          pkg.author = 'Mario Antonio Flores Ramos';
          pkg.description = 'Customer App implementing Facade Design Pattern - Lab 02';
          pkg.keywords = ['facade', 'design-pattern', 'nestjs', 'typescript'];
          require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
        "
        
        # Mostrar configuración para debug
        echo "=== Nueva versión: $NEW_VERSION ==="
        echo '=== .npmrc content ==='
        cat .npmrc
        echo '=== package.json name & version ==='
        node -e "const pkg=require('./package.json'); console.log(pkg.name + '@' + pkg.version)"
        
        # Publicar
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.TOKEN_PACKAGE }}
        
    - name: 📬 Publish Notifications to GitHub Packages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd notifications
        
        # Configurar .npmrc para GitHub Packages
        echo "@marant7:registry=https://npm.pkg.github.com" > .npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ secrets.TOKEN_PACKAGE }}" >> .npmrc
        
        # Generar versión única basada en timestamp
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        NEW_VERSION="1.0.${TIMESTAMP}"
        
        # Configurar package.json con versión única
        node -e "
          const pkg = require('./package.json');
          pkg.name = '@marant7/notifications-ramos';
          pkg.version = '$NEW_VERSION';
          delete pkg.private;
          pkg.publishConfig = {
            registry: 'https://npm.pkg.github.com',
            access: 'public'
          };
          pkg.repository = {
            type: 'git',
            url: 'git+https://github.com/${{ github.repository }}.git'
          };
          pkg.author = 'Mario Antonio Flores Ramos';
          pkg.description = 'Notifications App implementing Bridge Design Pattern - Lab 02';
          pkg.keywords = ['bridge', 'design-pattern', 'nestjs', 'typescript'];
          require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
        "
        
        # Mostrar configuración para debug
        echo "=== Nueva versión: $NEW_VERSION ==="
        echo '=== .npmrc content ==='
        cat .npmrc
        echo '=== package.json name & version ==='
        node -e "const pkg=require('./package.json'); console.log(pkg.name + '@' + pkg.version)"
        
        # Publicar
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.TOKEN_PACKAGE }}
        
    - name: 📋 Display Package URLs
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Obtener timestamp para mostrar en el resumen
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        VERSION="1.0.${TIMESTAMP}"
        
        echo "## 📦 Paquetes Publicados en GitHub Packages" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **@marant7/customer-app-ramos@$VERSION**" >> $GITHUB_STEP_SUMMARY
        echo "🔗 https://github.com/Marant7?tab=packages" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **@marant7/notifications-ramos@$VERSION**" >> $GITHUB_STEP_SUMMARY
        echo "🔗 https://github.com/Marant7?tab=packages" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🛠️ **Instalación:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "npm install @marant7/customer-app-ramos@$VERSION" >> $GITHUB_STEP_SUMMARY
        echo "npm install @marant7/notifications-ramos@$VERSION" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🆔 **Build ID:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Timestamp:** $TIMESTAMP" >> $GITHUB_STEP_SUMMARY